// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE
'use strict';

var Jest            = require("bs-jest/lib/js/src/jest.js");
var Most            = require("../most.js");
var Most$1          = require("most");
var Curry           = require("bs-platform/lib/js/curry.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var Oh_no = Caml_exceptions.create("Most_test.Oh_no");

function noOp() {
  return /* () */0;
}

function combine(coll, el) {
  coll.push(el);
  return /* () */0;
}

function asyncExpectToEqual(expected, actual) {
  return Promise.resolve(Jest.Expect[/* toEqual */11](expected)(Jest.Expect[/* expect */0](actual)));
}

var Helpers = /* module */[
  /* noOp */noOp,
  /* combine */combine,
  /* asyncExpectToEqual */asyncExpectToEqual
];

Jest.testPromise("empty", (function () {
        var empty = Most$1.empty();
        var success = function () {
          return asyncExpectToEqual(/* true */1, /* true */1);
        };
        return empty.observe((function () {
                        throw Oh_no;
                      })).then(success);
      }));

Jest.testAsync("just", (function (done_) {
        var success = function (result) {
          return Curry._1(done_, Jest.Expect[/* toBe */1]("asdf")(Jest.Expect[/* expect */0](result)));
        };
        Most$1.just("asdf").observe(success);
        return /* () */0;
      }));

Jest.testPromise("from", (function () {
        var result = /* array */[];
        var combine = function (param) {
          result.push(param);
          return /* () */0;
        };
        var success = function () {
          return asyncExpectToEqual(/* int array */[
                      1,
                      2
                    ], result);
        };
        return Most$1.from(/* int array */[
                        1,
                        2
                      ]).observe(combine).then(success);
      }));

Jest.testPromise("concat", (function () {
        var result = /* array */[];
        var combine = function (param) {
          result.push(param);
          return /* () */0;
        };
        var s1 = Most$1.from(/* int array */[
              1,
              2,
              3
            ]);
        var s2 = Most$1.from(/* int array */[
              4,
              5,
              6
            ]);
        var success = function () {
          return asyncExpectToEqual(/* array */[
                      1,
                      2,
                      3,
                      4,
                      5,
                      6
                    ], result);
        };
        return s1.concat(s2).observe(combine).then(success);
      }));

Jest.testPromise("startWith", (function () {
        var result = /* array */[];
        var combine = function (param) {
          result.push(param);
          return /* () */0;
        };
        var s = Most$1.from(/* int array */[
              1,
              2,
              3
            ]);
        var success = function () {
          return asyncExpectToEqual(/* int array */[
                      0,
                      1,
                      2,
                      3
                    ], result);
        };
        return Most.startWith(0, s).observe(combine).then(success);
      }));

exports.Oh_no   = Oh_no;
exports.Helpers = Helpers;
/*  Not a pure module */
