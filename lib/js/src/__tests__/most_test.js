// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("bs-jest/lib/js/src/jest.js");
var Most = require("../most.js");
var Most$1 = require("most");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var MostSubject = require("most-subject");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function noOp() {
  return /* () */0;
}

function combineArray(coll, el) {
  coll.push(el);
  return /* () */0;
}

function combineList(collRef, el) {
  collRef[0] = /* :: */[
    el,
    collRef[0]
  ];
  return /* () */0;
}

function asyncExpectToEqual(expected, actual) {
  return Promise.resolve(Jest.Expect[/* toEqual */12](expected, Jest.Expect[/* expect */0](actual)));
}

var Helpers = /* module */[
  /* noOp */noOp,
  /* combineArray */combineArray,
  /* combineList */combineList,
  /* asyncExpectToEqual */asyncExpectToEqual
];

Jest.testPromise("empty", (function () {
        var empty = Most$1.empty();
        var success = function () {
          return asyncExpectToEqual(true, true);
        };
        return Most$1.observe((function () {
                        throw [
                              Caml_builtin_exceptions.failure,
                              "this shouldn't happen"
                            ];
                      }), empty).then(success);
      }));

Jest.testAsync("just", (function (done_) {
        var success = function (result) {
          return Curry._1(done_, Jest.Expect[/* toBe */2]("asdf", Jest.Expect[/* expect */0](result)));
        };
        Most$1.observe(success, Most$1.just("asdf"));
        return /* () */0;
      }));

Jest.testPromise("from", (function () {
        var result = /* array */[];
        var combine = function (param) {
          result.push(param);
          return /* () */0;
        };
        var success = function () {
          return asyncExpectToEqual(/* array */[
                      1,
                      2
                    ], result);
        };
        return Most$1.observe(combine, Most$1.from(/* array */[
                          1,
                          2
                        ])).then(success);
      }));

Jest.testPromise("fromPromise", (function () {
        var promise = Promise.resolve("OK");
        var result = /* record */[/* contents */""];
        return Most$1.observe((function (res) {
                        result[0] = res;
                        return /* () */0;
                      }), Most$1.fromPromise(promise)).then((function () {
                      return asyncExpectToEqual("OK", result[0]);
                    }));
      }));

Jest.testPromise("concat", (function () {
        var result = /* array */[];
        var combine = function (param) {
          result.push(param);
          return /* () */0;
        };
        var s1 = Most$1.from(/* array */[
              1,
              2,
              3
            ]);
        var s2 = Most$1.from(/* array */[
              4,
              5,
              6
            ]);
        var success = function () {
          return asyncExpectToEqual(/* array */[
                      1,
                      2,
                      3,
                      4,
                      5,
                      6
                    ], result);
        };
        return Most$1.observe(combine, s1.concat(s2)).then(success);
      }));

Jest.testPromise("startWith", (function () {
        var result = /* array */[];
        var combine = function (param) {
          result.push(param);
          return /* () */0;
        };
        var s = Most$1.from(/* array */[
              1,
              2,
              3
            ]);
        var success = function () {
          return asyncExpectToEqual(/* array */[
                      0,
                      1,
                      2,
                      3
                    ], result);
        };
        return Most$1.observe(combine, Most$1.startWith(0, s)).then(success);
      }));

Jest.testPromise("unfold", (function () {
        var result = /* record */[/* contents : [] */0];
        var combine = function (el) {
          result[0] = /* :: */[
            el,
            result[0]
          ];
          return /* () */0;
        };
        var success = function () {
          return asyncExpectToEqual(/* :: */[
                      6,
                      /* :: */[
                        4,
                        /* :: */[
                          2,
                          /* [] */0
                        ]
                      ]
                    ], result[0]);
        };
        return Most$1.observe(combine, Most.unfold((function (seed) {
                              if (seed < 4) {
                                var nextSeed = seed + 1 | 0;
                                return /* tuple */[
                                        (seed << 1),
                                        nextSeed
                                      ];
                              }
                              
                            }))(1)).then(success);
      }));

Jest.testPromise("fromList", (function () {
        var result = /* record */[/* contents : [] */0];
        var combine = function (param) {
          return combineList(result, param);
        };
        var success = function () {
          return asyncExpectToEqual(/* :: */[
                      3,
                      /* :: */[
                        2,
                        /* :: */[
                          1,
                          /* [] */0
                        ]
                      ]
                    ], result[0]);
        };
        return Most$1.observe(combine, Most.fromList(/* :: */[
                          1,
                          /* :: */[
                            2,
                            /* :: */[
                              3,
                              /* [] */0
                            ]
                          ]
                        ])).then(success);
      }));

Jest.testPromise("map", (function () {
        var result = /* array */[];
        var combineResult = function (param) {
          result.push(param);
          return /* () */0;
        };
        var success = function () {
          return asyncExpectToEqual(/* array */[
                      2,
                      4,
                      6
                    ], result);
        };
        return Most$1.observe(combineResult, Most$1.map((function (n) {
                            return (n << 1);
                          }), Most$1.from(/* array */[
                              1,
                              2,
                              3
                            ]))).then(success);
      }));

Jest.testPromise("constant", (function () {
        var result = /* array */[];
        var combine = function (param) {
          result.push(param);
          return /* () */0;
        };
        var success = function () {
          return asyncExpectToEqual(/* array */[
                      10,
                      10,
                      10
                    ], result);
        };
        return Most$1.observe(combine, Most$1.constant(10, Most$1.from(/* array */[
                              1,
                              2,
                              3
                            ]))).then(success);
      }));

Jest.testPromise("scan", (function () {
        var result = /* array */[];
        var combine = function (param) {
          result.push(param);
          return /* () */0;
        };
        var success = function () {
          return asyncExpectToEqual(/* array */[
                      0,
                      1,
                      3,
                      6,
                      10
                    ], result);
        };
        return Most$1.observe(combine, Most$1.scan((function (accum, n) {
                            return accum + n | 0;
                          }), 0, Most$1.from(/* array */[
                              1,
                              2,
                              3,
                              4
                            ]))).then(success);
      }));

Jest.testPromise("flatMap", (function () {
        var result = /* array */[];
        var combine = function (param) {
          result.push(param);
          return /* () */0;
        };
        var success = function () {
          return asyncExpectToEqual(/* array */[
                      0,
                      1,
                      0,
                      2,
                      0,
                      3,
                      0,
                      4
                    ], result);
        };
        return Most$1.observe(combine, Most$1.flatMap((function (x) {
                            return Most$1.from(/* array */[
                                        0,
                                        x
                                      ]);
                          }), Most$1.from(/* array */[
                              1,
                              2,
                              3,
                              4
                            ]))).then(success);
      }));

Jest.testPromise("filter", (function () {
        return Most$1.reduce((function (acc, n) {
                        return /* :: */[
                                n,
                                acc
                              ];
                      }), /* [] */0, Most$1.filter((function (n) {
                            return n % 2 === 0;
                          }), Most$1.from(/* array */[
                              1,
                              2,
                              3,
                              4,
                              5,
                              6
                            ]))).then((function (result) {
                      return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                      6,
                                      /* :: */[
                                        4,
                                        /* :: */[
                                          2,
                                          /* [] */0
                                        ]
                                      ]
                                    ], Jest.Expect[/* expect */0](result)));
                    }));
      }));

Jest.testPromise("slice", (function () {
        return Most$1.reduce((function (acc, n) {
                        return /* :: */[
                                n,
                                acc
                              ];
                      }), /* [] */0, Most$1.slice(2, 5, Most.fromList(/* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* :: */[
                                    4,
                                    /* :: */[
                                      5,
                                      /* :: */[
                                        6,
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]))).then((function (result) {
                      return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                      5,
                                      /* :: */[
                                        4,
                                        /* :: */[
                                          3,
                                          /* [] */0
                                        ]
                                      ]
                                    ], Jest.Expect[/* expect */0](result)));
                    }));
      }));

Jest.testPromise("take", (function () {
        return Most$1.reduce((function (acc, n) {
                        return /* :: */[
                                n,
                                acc
                              ];
                      }), /* [] */0, Most$1.take(3, Most$1.from(/* array */[
                              1,
                              2,
                              3,
                              4,
                              5,
                              6
                            ]))).then((function (result) {
                      return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                      3,
                                      /* :: */[
                                        2,
                                        /* :: */[
                                          1,
                                          /* [] */0
                                        ]
                                      ]
                                    ], Jest.Expect[/* expect */0](result)));
                    }));
      }));

Jest.testPromise("skip", (function () {
        return Most$1.reduce((function (acc, n) {
                        return /* :: */[
                                n,
                                acc
                              ];
                      }), /* [] */0, Most$1.skip(3, Most$1.from(/* array */[
                              1,
                              2,
                              3,
                              4,
                              5,
                              6
                            ]))).then((function (result) {
                      return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                      6,
                                      /* :: */[
                                        5,
                                        /* :: */[
                                          4,
                                          /* [] */0
                                        ]
                                      ]
                                    ], Jest.Expect[/* expect */0](result)));
                    }));
      }));

Jest.testPromise("merge", (function () {
        var s1 = Most.fromList(/* :: */[
              /* Int */Block.__(1, [1]),
              /* :: */[
                /* Int */Block.__(1, [2]),
                /* :: */[
                  /* Int */Block.__(1, [3]),
                  /* [] */0
                ]
              ]
            ]);
        var s2 = Most.fromList(/* :: */[
              /* String */Block.__(0, ["a"]),
              /* :: */[
                /* String */Block.__(0, ["b"]),
                /* :: */[
                  /* String */Block.__(0, ["c"]),
                  /* [] */0
                ]
              ]
            ]);
        return Most$1.reduce((function (acc, n) {
                        return /* :: */[
                                n,
                                acc
                              ];
                      }), /* [] */0, Most$1.merge(s1, s2)).then((function (result) {
                      return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                      /* String */Block.__(0, ["c"]),
                                      /* :: */[
                                        /* Int */Block.__(1, [3]),
                                        /* :: */[
                                          /* String */Block.__(0, ["b"]),
                                          /* :: */[
                                            /* Int */Block.__(1, [2]),
                                            /* :: */[
                                              /* String */Block.__(0, ["a"]),
                                              /* :: */[
                                                /* Int */Block.__(1, [1]),
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ], Jest.Expect[/* expect */0](result)));
                    }));
      }));

Jest.testPromise("combine", (function () {
        var s1 = Most.fromList(/* :: */[
              /* Int */Block.__(1, [1]),
              /* :: */[
                /* Int */Block.__(1, [2]),
                /* :: */[
                  /* Int */Block.__(1, [3]),
                  /* [] */0
                ]
              ]
            ]);
        var s2 = Most.fromList(/* :: */[
              /* String */Block.__(0, ["a"]),
              /* :: */[
                /* String */Block.__(0, ["b"]),
                /* :: */[
                  /* String */Block.__(0, ["c"]),
                  /* [] */0
                ]
              ]
            ]);
        var toTuple = function (a, b) {
          return /* tuple */[
                  a,
                  b
                ];
        };
        return Most$1.reduce((function (acc, n) {
                        return /* :: */[
                                n,
                                acc
                              ];
                      }), /* [] */0, Most$1.combine(toTuple, s1, s2)).then((function (result) {
                      return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                      /* tuple */[
                                        /* Int */Block.__(1, [3]),
                                        /* String */Block.__(0, ["c"])
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          /* Int */Block.__(1, [3]),
                                          /* String */Block.__(0, ["b"])
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            /* Int */Block.__(1, [2]),
                                            /* String */Block.__(0, ["b"])
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              /* Int */Block.__(1, [2]),
                                              /* String */Block.__(0, ["a"])
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                /* Int */Block.__(1, [1]),
                                                /* String */Block.__(0, ["a"])
                                              ],
                                              /* [] */0
                                            ]
                                          ]
                                        ]
                                      ]
                                    ], Jest.Expect[/* expect */0](result)));
                    }));
      }));

Jest.testPromise("zip", (function () {
        var s1 = Most.fromList(/* :: */[
              /* Int */Block.__(1, [1]),
              /* :: */[
                /* Int */Block.__(1, [2]),
                /* :: */[
                  /* Int */Block.__(1, [3]),
                  /* [] */0
                ]
              ]
            ]);
        var s2 = Most.fromList(/* :: */[
              /* String */Block.__(0, ["a"]),
              /* :: */[
                /* String */Block.__(0, ["b"]),
                /* :: */[
                  /* String */Block.__(0, ["c"]),
                  /* [] */0
                ]
              ]
            ]);
        var toTuple = function (a, b) {
          return /* tuple */[
                  a,
                  b
                ];
        };
        return Most$1.reduce((function (acc, n) {
                        return /* :: */[
                                n,
                                acc
                              ];
                      }), /* [] */0, Most$1.zip(toTuple, s1, s2)).then((function (result) {
                      return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                      /* tuple */[
                                        /* Int */Block.__(1, [3]),
                                        /* String */Block.__(0, ["c"])
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          /* Int */Block.__(1, [2]),
                                          /* String */Block.__(0, ["b"])
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            /* Int */Block.__(1, [1]),
                                            /* String */Block.__(0, ["a"])
                                          ],
                                          /* [] */0
                                        ]
                                      ]
                                    ], Jest.Expect[/* expect */0](result)));
                    }));
      }));

Jest.testPromise("sample1", (function () {
        var id = function (x) {
          return x;
        };
        var sampler = Most$1.take(10, Most$1.periodic(100));
        var s = Most$1.startWith(1, Most$1.constant(2, Most$1.periodic(200)));
        return Most$1.reduce((function (acc, n) {
                        return /* :: */[
                                n,
                                acc
                              ];
                      }), /* [] */0, Most$1.sample(id, sampler, s)).then((function (result) {
                      return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                      2,
                                      /* :: */[
                                        2,
                                        /* :: */[
                                          2,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              2,
                                              /* :: */[
                                                2,
                                                /* :: */[
                                                  2,
                                                  /* :: */[
                                                    2,
                                                    /* :: */[
                                                      2,
                                                      /* :: */[
                                                        1,
                                                        /* [] */0
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ], Jest.Expect[/* expect */0](result)));
                    }));
      }));

Jest.testPromise("sample2", (function () {
        var add = function (x, y) {
          return x + y | 0;
        };
        var sampler = Most$1.take(10, Most$1.periodic(100));
        var s1 = Most$1.startWith(1, Most$1.constant(1, Most$1.periodic(200)));
        var s2 = Most$1.constant(2, Most$1.periodic(300));
        return Most$1.reduce((function (acc, n) {
                        return /* :: */[
                                n,
                                acc
                              ];
                      }), /* [] */0, Most$1.sample(add, sampler, s1, s2)).then((function (result) {
                      return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                      3,
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          3,
                                          /* :: */[
                                            3,
                                            /* :: */[
                                              3,
                                              /* :: */[
                                                3,
                                                /* :: */[
                                                  3,
                                                  /* :: */[
                                                    3,
                                                    /* :: */[
                                                      3,
                                                      /* :: */[
                                                        3,
                                                        /* [] */0
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ], Jest.Expect[/* expect */0](result)));
                    }));
      }));

Jest.testPromise("basic Subject", (function () {
        var subj = MostSubject.async();
        var promise = Most$1.reduce((function (acc, n) {
                  return /* :: */[
                          n,
                          acc
                        ];
                }), /* [] */0, subj).then((function (result) {
                return Promise.resolve(Jest.Expect[/* toEqual */12](/* :: */[
                                3,
                                /* :: */[
                                  2,
                                  /* :: */[
                                    1,
                                    /* [] */0
                                  ]
                                ]
                              ], Jest.Expect[/* expect */0](result)));
              }));
        MostSubject.next(1, subj);
        MostSubject.next(2, subj);
        MostSubject.next(3, subj);
        subj.complete();
        return promise;
      }));

exports.Helpers = Helpers;
/*  Not a pure module */
